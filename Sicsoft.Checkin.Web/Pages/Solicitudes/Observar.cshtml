@page "{id}"
@model NONPO.Pages.Solicitudes.ObservarModel
@{
    ViewData["Title"] = "Solicitudes";
}
@using System.Globalization;
@{
    NumberFormatInfo formato = new CultureInfo("en-US").NumberFormat;
    formato.CurrencyGroupSeparator = ",";
    formato.NumberDecimalSeparator = ".";
    var idUsuario = Convert.ToInt32(((ClaimsIdentity)User.Identity).Claims.Where(d => d.Type == ClaimTypes.Actor).Select(s1 => s1.Value).FirstOrDefault().ToString());

    NumberFormatInfo formato2 = new CultureInfo("en-CR").NumberFormat;
    formato2.CurrencyGroupSeparator = ",";
    formato2.NumberDecimalSeparator = ".";


}
@section styles {
    <style>


        .lab {
            font-weight: 400;
            font-size: 13px;
        }

        .lab2 {
            font-weight: 400;
            font-size: 13px;
        }

        .label {
            color: #fff !important;
            background-color: #57b846 !important;
            cursor: pointer;
            text-decoration: underline;
            background: none;
            font-size: 17px;
            padding: 8px 18px !important;
        }

        .label-submit {
            color: #fff !important;
            background-color: #57b846 !important;
            cursor: pointer;
            background: none;
            font-size: 13px;
            padding: 8px 18px !important;
        }
        /*label
                                                        {
                                                            font-size: 15px;
                                                        }*/

        #imgGalerias {
            display: none;
        }

    </style>

}
    @using Microsoft.AspNetCore.Http
    @using System;
    @using System.Collections.Generic;
    @using System.IO;
    @using System.Linq;
    @using System.Security.Claims;
    @using System.Threading.Tasks;
    @using Microsoft.AspNetCore.Mvc;
    @using Microsoft.AspNetCore.Mvc.RazorPages;
    @using Microsoft.Extensions.Configuration;
    @using Refit;

    @inject IHttpContextAccessor httpContextAccessor
@{
    var Roles = ((ClaimsIdentity)User.Identity).Claims.Where(d => d.Type == "Roles").Select(s1 => s1.Value).FirstOrDefault().Split("|");
}
@section scripts {
    <script>
        $(document).ready(function () {
            jQuery(document).ready(function ($) {

            });



            $(document).ready(function () {

            });


        });

        function ImprimirPantalla() {
            try {
                // window.print();
                var margins = {
                    top: 10,
                    bottom: 10,
                    left: 10,
                    width: 595
                };


                html = $(".html").html();
                html2pdf(html, {
                    margin: 1,
                    padding: 0,
                    filename: 'Solicitudes.pdf',
                    image: { type: 'jpeg', quality: 1 },
                    html2canvas: { scale: 2, logging: true },
                    jsPDF: { unit: 'in', format: 'A2', orientation: 'P' },
                    class: ImprimirPantalla
                });

            } catch (e) {
                console.log(e);
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Ha ocurrido un error al intentar imprimir ' + e

                })
            }
        }


        function Rechazar() {

            var Solicitud = {
                id: $("#id").val(),
                ComentariosAprobador: $("#inputComentariosA").val()

            };
            Swal.fire({
                title: '¿Desea rechazar esta solicitud?',
                showDenyButton: true,
                showCancelButton: false,
                confirmButtonText: `Aceptar`,
                denyButtonText: `Cancelar`,
                customClass: {
                    confirmButton: 'swalBtnColor',
                    denyButton: 'swalDeny'
                },
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: 'POST',

                        url: '@Url.Page("Observar", "Rechazar")',
                        dataType: 'json',
                        data: { enviados: Solicitud },
                        headers: {
                            RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                        },
                        success: function (json) {

                            $("#divProcesando").hide();

                            if ($('.modal-backdrop').is(':visible')) {

                                $('body').removeClass('modal-open');
                                $('.modal-backdrop').hide();
                            }
                            console.log("resultado " + json);
                            if (json.success == true) {
                                Swal.fire({
                                    title: "Ha sido rechazado con éxito",

                                    icon: 'success',
                                    showCancelButton: false,

                                    confirmButtonText: 'OK',
                                    customClass: {
                                        confirmButton: 'swalBtnColor',

                                    },
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        window.location.href = window.location.href.split("/Observar")[0];
                                    }
                                })

                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Oops...',
                                    text: 'Ha ocurrido un error al intentar rechazar ' + json.mensaje

                                })
                            }
                        },

                        beforeSend: function (xhr) {

                            $("#divProcesando").modal("show");
                        },
                        complete: function () {

                        },
                        error: function (error) {

                        }
                    });
                }
            })

        }
        function Aprobar() {
            var Solicitud = {
                id: $("#id").val(),
                ComentariosAprobador: $("#inputComentariosA").val()

            };
            Swal.fire({
                title: '¿Desea aprobar esta solicitud?',
                showDenyButton: true,
                showCancelButton: false,
                confirmButtonText: `Aceptar`,
                denyButtonText: `Cancelar`,
                customClass: {
                    confirmButton: 'swalBtnColor',
                    denyButton: 'swalDeny'
                },
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: 'POST',

                        url: '@Url.Page("Observar", "Aprobar")',
                        dataType: 'json',
                        data: { enviados: Solicitud },
                        headers: {
                            RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                        },
                        success: function (json) {

                            $("#divProcesando").hide();

                            if ($('.modal-backdrop').is(':visible')) {

                                $('body').removeClass('modal-open');
                                $('.modal-backdrop').hide();
                            }
                            console.log("resultado " + json);
                            if (json.success == true) {
                                Swal.fire({
                                    title: "Ha sido aprobada con éxito",

                                    icon: 'success',
                                    showCancelButton: false,

                                    confirmButtonText: 'OK',
                                    customClass: {
                                        confirmButton: 'swalBtnColor',

                                    },
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        window.location.href = window.location.href.split("/Observar")[0];
                                    }
                                })

                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Oops...',
                                    text: 'Ha ocurrido un error al intentar aceptar ' + json.mensaje

                                })
                            }
                        },

                        beforeSend: function (xhr) {

                            $("#divProcesando").modal("show");
                        },
                        complete: function () {

                        },
                        error: function (error) {

                        }
                    });
                }
            })

        }
    </script>

}

    @using Newtonsoft.Json;
    @using System.Globalization
<!-- Content Header (Page header) -->
<section class="content-header">
    <h1>
        Solicitudes
    </h1>
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="#"><i class="ti-dashboard"></i></a></li>
        <li class="breadcrumb-item active">Observar Solicitud</li>
    </ol>
</section>

<section class="content ">
    <div class="row">
        <div class="col-12">

            <div class="box">
                <div class="box-header with-border">
                    <div class="row">
                        <input hidden asp-for="Objeto.id" id="id" />
                        <div class="col-8">
                            <h6 class="box-subtitle">Observar Solicitud</h6>


                        </div>
                        <div class="col-4">
                            <a asp-page="./Index" class="btn btn-outline-info" style="text-decoration: underline;"><i class="ti-back-left "></i>  Regresar</a>

                            &nbsp;



                        </div>
                    </div>
                </div>
                <div class="box-body">
                    <!-- title row -->
                    <div class="row">
                    </div>
                    <div class="col-md-12">
                        <div class="page-header mt-0">
                            <h2 class="d-inline"><span class="font-size-24">Solicitud No: @Model.Objeto.id</span></h2>
                            <br />
                            <div class="text-left">
                                <div class="row">
                                    <div class="col-md-4">
                                        <h5> <b>Fecha: </b> @Model.Objeto.Fecha.ToString("dd/MM/yyyy")</h5>

                                    </div>

                                    <div class="col-md-4">
                                        <h5>
                                            <b>Status:</b>
                                            @{
                                                switch (Model.Objeto.Status)
                                                {
                                                    case "P":
                                                        {
                                                            <td align="center" style="padding-top:15px;"><span class="badge badge-warning">Pendiente</span></td>
                                                            break;
                                                        }
                                                    case "G":
                                                        {
                                                            <td align="center" style="padding-top:15px;"><span style=" background-color:#E47F05;" class="badge badge-secondary">Espera aprobación</span></td>
                                                            break;
                                                        }
                                                    case "S":
                                                        {
                                                            <td align="center" style="padding-top:15px;"><span style=" background-color:#E47F05;" class="badge badge-secondary">Espera segundo aprobador</span></td>
                                                            break;
                                                        }
                                                    case "A":
                                                        {
                                                            <td align="center" style="padding-top:15px;"><span class="badge badge-danger">Aprobado</span></td>
                                                            break;
                                                        }
                                                    case "R":
                                                        {
                                                            <td align="center" style="padding-top:15px;"><span class="badge badge-warning">Rechazado</span></td>
                                                            break;
                                                        }

                                                    case "C":
                                                        {
                                                            <td align="center" style="padding-top:15px;"><span class="badge badge-danger">Contabilizado</span></td>
                                                            break;
                                                        }
                                                    case "L":
                                                        {
                                                            <td align="center" style="padding-top:15px;"><span class="badge badge-info">Espera de contabilización</span></td>
                                                            break;
                                                        }
                                                }


                                            }


                                        </h5>
                                    </div> *





                                    <div class="col-3">
                                        <h5> <b>Moneda: </b> @Model.Objeto.Moneda</h5>

                                    </div>



                                    <br />





                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- info row -->
                    <div class="row invoice-info">
                        <div class="col-md-4 invoice-col">
                            <strong>Usuario</strong>
                            <address>
                                <strong class="text-blue font-size-24"> @(Model.Usuarios.Where(a => a.id == Model.Objeto.idUsuarioCreador).FirstOrDefault() == null ? "Usuario Inexistente" : Model.Usuarios.Where(a => a.id == Model.Objeto.idUsuarioCreador).FirstOrDefault().id + " - " + Model.Usuarios.Where(a => a.id == Model.Objeto.idUsuarioCreador).FirstOrDefault().Nombre)  </strong>


                            </address>
                        </div>
                        <div class="col-md-3 invoice-col">
                            <strong>Rango</strong>
                            <address>
                                <strong class="text-blue font-size-18"> @(Model.Rangos.Where(a => a.id == Model.Objeto.idRango).FirstOrDefault() == null ? "Rango Inexistente" : Model.Rangos.Where(a => a.id == Model.Objeto.idRango).FirstOrDefault().id + " - " + Model.Rangos.Where(a => a.id == Model.Objeto.idRango).FirstOrDefault().Nombre)  </strong>


                            </address>
                        </div>



                        <div class="col-md-3 invoice-col">
                            <strong>Tipo de Gasto</strong>
                            <address>
                                <strong class="text-blue font-size-18"> @(Model.Gastos.Where(a => a.idTipoGasto == Model.Objeto.idTipoGasto).FirstOrDefault() == null ? "Gasto Inexistente" : Model.Gastos.Where(a => a.idTipoGasto == Model.Objeto.idTipoGasto).FirstOrDefault().Nombre) </strong>


                            </address>
                        </div>
                        <div class="col-md-2 invoice-col">
                            <strong>Monto</strong>
                            <address>
                                <strong class="text-blue font-size-18"> @Math.Round(Model.Objeto.Monto, 2).ToString("C", formato) </strong>


                            </address>
                        </div>
                        <div class="col-md-6 invoice-col">
                            <strong>Comentarios Usuario</strong>
                            <address>
                                <strong class="text-blue font-size-18"> @Model.Objeto.Comentarios </strong>


                            </address>
                        </div>


                        <!-- /.col -->
                    </div>

                    <div class="row">
                        <div class="col-12 table-responsive">
                            <table class="table table-bordered">
                                <thead>
                                    <tr class="bg-pale-info">
                                        <th class="text-center">#</th>
                                        <th class="text-center">Usuarios Aprobadores</th>



                                    </tr>
                                </thead>
                                <tbody>

                                    @foreach (var item in Model.RangosLogin)
                                    {
                                        <tr>
                                            <td style="text-align: center">@item.idLogin</td>





                                            <td class="text-center">@(Model.Usuarios.Where(a => a.id == item.idLogin).FirstOrDefault() == null ? "Usuario Inexistente" : Model.Usuarios.Where(a => a.id == item.idLogin).FirstOrDefault().Nombre) </td>

                                        </tr>
                                    }


                                </tbody>
                            </table>
                        </div>
                        <!-- /.col -->
                    </div>


                    <!-- /.row -->


                </div>
            </div>





            @if (Model.Objeto.Facturas.Length > 0)
            {
                <div class="box">
                    <div class="box-body">
                        <div class="row">

                            <div class="col-md-4 invoice-col">

                                <address>
                                    <strong class="text-blue font-size-18"> Facturas</strong>


                                </address>
                            </div>

                            <div class="col-12 table-responsive">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr class="bg-pale-info">


                                            <th class="text-center">Consecutivo Hacienda</th>
                                            <th class="text-center">Fecha</th>
                                            <th class="text-center">Proveedor</th>



                                            <th class="text-center">Total</th>



                                        </tr>
                                    </thead>
                                    <tbody>

                                        @foreach (var item in Model.Objeto.Facturas)
                                        {
                                            <tr>
                                                <td style="text-align: center">@item.NumFactura</td>
                                                <td style="text-align: center">@item.Fecha.ToString("dd/MM/yyyy")</td>
                                                <td style="text-align: center">@item.CedulaProveedor - @item.NomProveedor</td>

                                                @if (Model.Objeto.Moneda == "USD")
                                                {
                                                    <td>  @Math.Round(@item.Monto, 2).ToString("C", formato)</td>
                                                }
                                                else
                                                {
                                                    <td>  @Math.Round(@item.Monto, 2).ToString("C", formato2)</td>
                                                }






                                            </tr>
                                        }


                                    </tbody>
                                </table>
                            </div>

                            <div class="col-12  text-right">


                             
                                <div class="total-payment">
                                    @if(Model.Objeto.Moneda == "USD")
                                    {
                                        <h3><b>Total :</b>  <span>  @Math.Round(Model.Objeto.TotalFacturas, 2).ToString("C", formato)</span></h3>
                                    }
                                    else
                                    {
                                        <h3><b>Total :</b>  <span>  @Math.Round(Model.Objeto.TotalFacturas, 2).ToString("C", formato2)</span></h3>
                                    }
                                   
                                </div>



                            </div>
                            <!-- /.col -->
                        </div>
                    </div>


                    <!-- Default box -->

                </div>
            }
            @{
                if (!string.IsNullOrEmpty(Roles.Where(a => a == "31").FirstOrDefault()))
                {
                    <!-- Default box -->
                    <div class="box">
                        <div class="box-header with-border">
                            <h4 class="box-title">Logs</h4>
                        </div>
                        <div class="box-body">
                            <!-- Table row -->
                            <div class="row">
                                <div class="col-12 table-responsive">
                                    <table class="table table-bordered">
                                        <thead>
                                            <tr class="bg-pale-info">
                                                <th class="text-center">Detalle</th>
                                                <th class="text-center">Fecha</th>


                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in Model.Objeto.Logs)
                                            {
                                                <tr>
                                                    <td>@item.Detalle</td>
                                                    <td>@item.Fecha</td>

                                                </tr>
                                            }


                                        </tbody>
                                    </table>
                                </div>
                                <!-- /.col -->
                            </div>
                            <!-- /.row -->
                        </div>
                        <!-- /.box-body -->
                    </div>
                    <!-- /.box -->
                }


            }
        </div>

        <div class="col-md-6">

            @if ((Model.Objeto.Status == "G" || Model.Objeto.Status == "S") &&
            Model.Aprobaciones.Where(a => a.idLogin == idUsuario).FirstOrDefault() == null
            && !string.IsNullOrEmpty(Roles.Where(a => a == "21").FirstOrDefault()) && Model.Objeto.idUsuarioCreador != idUsuario)
            {
                <div class="form-group">
                    <label>Comentarios Aprobador</label>
                    <textarea id="inputComentariosA" class="form-control" asp-for="@Model.Objeto.ComentariosAprobador"></textarea>

                </div>
            }
            else
            {
                <div class="form-group">
                    <label>Comentarios Aprobador</label>
                    <textarea readonly id="inputComentariosA" asp-for="@Model.Objeto.ComentariosAprobador" class="form-control"></textarea>

                </div>
            }


       
        @if ((Model.Objeto.Status == "G" || Model.Objeto.Status == "S")
        && !string.IsNullOrEmpty(Roles.Where(a => a == "21").FirstOrDefault())
        && Model.Objeto.idUsuarioCreador != idUsuario
        && Model.Aprobaciones.Where(a => a.idLogin == idUsuario).FirstOrDefault() == null)
        {
            <button id="print" class="btn btn-danger" type="button" onclick="javascript: Rechazar()"> <span> Rechazar</span> </button>
            <button id="print" class="btn btn-success" type="button" onclick="javascript: Aprobar()"> <span> Aprobar</span> </button>

        }
        </div>
</section>






<!--Impresion-->
