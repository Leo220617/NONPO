// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using GestionGastos20.Models;
using Refit;
using System.Threading.Tasks;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace GestionGastos20.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

namespace Sicsoft.Checkin.Web.Servicios
{
    using GestionGastos20.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedICheckInClient : ICheckInClient
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedICheckInClient(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<TokenResponseViewModel> ICheckInClient.GetToken(TokenRequestViewModel q)
        {
            var arguments = new object[] { q };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetToken", new Type[] { typeof(TokenRequestViewModel) });
            return (Task<TokenResponseViewModel>)func(Client, arguments);
        }
    }
}

namespace Sicsoft.Checkin.Web.Servicios
{
    using GestionGastos20.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedICrudApi<TEntity, TKey>
     : ICrudApi<TEntity, TKey>
        where TEntity : class

    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedICrudApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task ICrudApi<TEntity, TKey>.EnviarCorreo(TEntity payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("EnviarCorreo", new Type[] { typeof(TEntity) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TEntity[]> ICrudApi<TEntity, TKey>.AgregarBulk(TEntity[] payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("AgregarBulk", new Type[] { typeof(TEntity[]) });
            return (Task<TEntity[]>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TEntity> ICrudApi<TEntity, TKey>.Agregar(TEntity payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Agregar", new Type[] { typeof(TEntity) });
            return (Task<TEntity>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TEntity> ICrudApi<TEntity, TKey>.CambiarClave(TEntity payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("CambiarClave", new Type[] { typeof(TEntity) });
            return (Task<TEntity>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TEntity> ICrudApi<TEntity, TKey>.Login(string email, string clave, string CedulaJuridica)
        {
            var arguments = new object[] { email, clave, CedulaJuridica };
            var func = requestBuilder.BuildRestResultFuncForMethod("Login", new Type[] { typeof(string), typeof(string), typeof(string) });
            return (Task<TEntity>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<bool> ICrudApi<TEntity, TKey>.VCierre(int idLogin, string Periodo, DateTime fechaCierre, string CodMoneda)
        {
            var arguments = new object[] { idLogin, Periodo, fechaCierre, CodMoneda };
            var func = requestBuilder.BuildRestResultFuncForMethod("VCierre", new Type[] { typeof(int), typeof(string), typeof(DateTime), typeof(string) });
            return (Task<bool>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TEntity[]> ICrudApi<TEntity, TKey>.ObtenerCompañias(string email)
        {
            var arguments = new object[] { email };
            var func = requestBuilder.BuildRestResultFuncForMethod("ObtenerCompañias", new Type[] { typeof(string) });
            return (Task<TEntity[]>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TEntity[]> ICrudApi<TEntity, TKey>.ObtenerListaCompras<TQuery>(TQuery q)
        {
            var arguments = new object[] { q };
            var func = requestBuilder.BuildRestResultFuncForMethod("ObtenerListaCompras", new Type[] { typeof(TQuery) }, new Type[] { typeof(TQuery) });
            return (Task<TEntity[]>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TEntity[]> ICrudApi<TEntity, TKey>.ObtenerLista<TQuery>(TQuery q)
        {
            var arguments = new object[] { q };
            var func = requestBuilder.BuildRestResultFuncForMethod("ObtenerLista", new Type[] { typeof(TQuery) }, new Type[] { typeof(TQuery) });
            return (Task<TEntity[]>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TEntity> ICrudApi<TEntity, TKey>.ObtenerHeader<TQuery>(TQuery q)
        {
            var arguments = new object[] { q };
            var func = requestBuilder.BuildRestResultFuncForMethod("ObtenerHeader", new Type[] { typeof(TQuery) }, new Type[] { typeof(TQuery) });
            return (Task<TEntity>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TEntity> ICrudApi<TEntity, TKey>.InsertarAsiento(int idCierre)
        {
            var arguments = new object[] { idCierre };
            var func = requestBuilder.BuildRestResultFuncForMethod("InsertarAsiento", new Type[] { typeof(int) });
            return (Task<TEntity>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ICrudApi<TEntity, TKey>.RealizarLecturaEmails()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("RealizarLecturaEmails", new Type[] {  });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ICrudApi<TEntity, TKey>.LecturaBandejaEntrada()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("LecturaBandejaEntrada", new Type[] {  });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TEntity> ICrudApi<TEntity, TKey>.ObtenerPorId(int id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("ObtenerPorId", new Type[] { typeof(int) });
            return (Task<TEntity>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TEntity> ICrudApi<TEntity, TKey>.CambiaEstado(int id, string Estado, string comentario, int idLoginAceptacion)
        {
            var arguments = new object[] { id, Estado, comentario, idLoginAceptacion };
            var func = requestBuilder.BuildRestResultFuncForMethod("CambiaEstado", new Type[] { typeof(int), typeof(string), typeof(string), typeof(int) });
            return (Task<TEntity>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ICrudApi<TEntity, TKey>.GenerarMovimientos(int id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GenerarMovimientos", new Type[] { typeof(int) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ICrudApi<TEntity, TKey>.Debitar(int id, string certificado, decimal monto)
        {
            var arguments = new object[] { id, certificado, monto };
            var func = requestBuilder.BuildRestResultFuncForMethod("Debitar", new Type[] { typeof(int), typeof(string), typeof(decimal) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ICrudApi<TEntity, TKey>.Editar(TEntity payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Editar", new Type[] { typeof(TEntity) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TEntity> ICrudApi<TEntity, TKey>.EditarFacturaManual(TEntity payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("EditarFacturaManual", new Type[] { typeof(TEntity) });
            return (Task<TEntity>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ICrudApi<TEntity, TKey>.EliminarInversion(string id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("EliminarInversion", new Type[] { typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ICrudApi<TEntity, TKey>.Eliminar(int id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Eliminar", new Type[] { typeof(int) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ICrudApi<TEntity, TKey>.EliminarUsuario(int id, string CedulaJuridica)
        {
            var arguments = new object[] { id, CedulaJuridica };
            var func = requestBuilder.BuildRestResultFuncForMethod("EliminarUsuario", new Type[] { typeof(int), typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ICrudApi<TEntity, TKey>.EliminarEjecutivo(int idEjecutivo)
        {
            var arguments = new object[] { idEjecutivo };
            var func = requestBuilder.BuildRestResultFuncForMethod("EliminarEjecutivo", new Type[] { typeof(int) });
            return (Task)func(Client, arguments);
        }
    }
}
